namespace CodeAbbey1
{
    class Program
    {


        static void Main(string[] args)
        {
            string second = null;
            string answer = null;
            int[] numberarry = new int[4]{0,0,0,0};
            string filePath = "inputfile.txt";
            StreamReader streamReader = new StreamReader(filePath);
            second = streamReader.ReadToEnd();
            streamReader.Close();
            second = second.Replace("\r\n", "|");
            string[] rows = second.Split('|');

            List<char> bracket_stack = new List<char>();
            
            int temp = 0;
            foreach (string row in rows.Skip(1))
            {//- round (), square [], curly {} and angle <> ones
                int itllwork = 1;
                for (int x = 0; x < row.Length; x++)
                {
                    if(row[x]=='(' || row[x]=='[' || row[x]=='{' || row[x]=='<')
                    {//Push to stack
                        bracket_stack.Add(row[x]);
                    }
                    else if (row[x] == ')' || row[x] == ']' || row[x] == '}' || row[x] == '>')
                    {//Pop partner from stack
                        if (bracket_stack.Count == 0)//Don't pop an empty stack
                        {
                            itllwork = 0;
                            break;
                        }
                        else if (bracket_stack.Last() == '(' && row[x] == ')')
                        {
                            bracket_stack.RemoveAt(bracket_stack.Count - 1);
                        }
                        else if (bracket_stack.Last() == '[' && row[x] == ']')
                        {
                            bracket_stack.RemoveAt(bracket_stack.Count - 1);
                        }
                        else if (bracket_stack.Last() == '{' && row[x] == '}')
                        {
                            bracket_stack.RemoveAt(bracket_stack.Count - 1);
                        }
                        else if (bracket_stack.Last() == '<' && row[x] == '>')
                        {
                            bracket_stack.RemoveAt(bracket_stack.Count - 1);
                        }
                        else
                        {
                            itllwork = 0;
                            break;
                        }
                    }
                }
                if (bracket_stack.Any())//if there is anything left over on the stack, they it should fail
                {
                    itllwork = 0;
                    bracket_stack.Clear();//clear it for the next line
                }
                answer = answer + itllwork.ToString() + ' ';
            }

            //temp = 0;

            Console.WriteLine("The answer is:");
            Console.Write(answer.Trim());
            Console.ReadKey();

        }
    }
}
