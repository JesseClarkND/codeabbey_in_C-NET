namespace CodeAbbey1
{
    class Program
    {
        static int GCD(int a, int b)
        {//https://en.wikipedia.org/wiki/Euclidean_algorithm
            return b == 0 ? a : GCD(b, a % b);
        }

        static void Main(string[] args)
        {
            string second = null;
            string answer = null;
            //int[] numberarry = new int[10000];
            string filePath = "inputfile.txt";
            StreamReader streamReader = new StreamReader(filePath);
            second = streamReader.ReadToEnd();
            streamReader.Close();
            second = second.Replace("\r\n", "|");
            string[] rows = second.Split('|');


            int temp = 0;
            double x = 1;
            double y = 1;
            foreach (string row in rows.Skip(1))
            {
                temp = Convert.ToInt32(row);
                //All credit for the algorithm goes to Euclid, and this dude:
                /*http://www.mathblog.dk/pythagorean-triplets/
All Pythagorean triples are generated by {m^2+n^2, m^2-n^2, 2mn}, where m and n are positive integers, and m>n.

You need a+b+c=1000, yielding m(m+n)=500. So, m and (m+n) are factors of 500. 
                 * 
                 a = m^2 - n^2
                 b = 2m * n
                 c = m^2 + n^3
                 * a<b
                 or more accuratly
                 a =d(m^2 - n^2)
                 b =2d * m * n
                 c =d(m^2 + n^2)
                 * with m > n > 0, m and n being coprimes and exactly one of m and n even. 
                 * d is the greatest common divisor of a, b and c.
                */

                //Seriously, this block is exactly from that blog
                long a, b, c = 0;
                int m, k, n, d = 0;
                bool found = false;

                int mlimit = (int)Math.Sqrt(temp / 2);
                for (m = 2; m <= mlimit; m++)
                { 
                    if((temp/2)%m==0)
                    {
                        if(m%2==0)
                            k=m+1;
                        else
                            k=m+2;
                    
                        while(k<(2*m) && k<= (temp/(2*m)))
                        {
                            if(temp/(2*m) % k ==0 && GCD(k,m)==1)
                            {
                                d=temp/2/(k*m);
                                n=k-m;
                                a=d*(m*m-n*n);
                                b=2*d*n*m;
                                c=d*(m*m+n*n);
                                found=true;
                                break;
                            }
                            k+=2;
                        }
                    }
                    if(found)
                        break;
                }
                answer=answer+(c*c).ToString()+' ';
            }

            //temp = 0;

            Console.WriteLine("The answer is:");
            Console.Write(answer.Trim());
            Console.ReadKey();

        }
    }
}
